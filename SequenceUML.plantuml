@startuml SequenceUML

!pragma teoz true

actor user as user

box "Laptop Service" #LightBlue
    participant WebCamera as WebCamera
        box "Sorting Service"
        participant generate_frames as generate_frames
        participant process_frame as process_frame
        participant BrickognizeAPI as BrickognizeAPI
        box "Raspberry Pi Service" #LightSalmon
            participant Hardware as Hardware 
            end box
        end box
end box

box "Web App Service" #LightGreen
    participant SQLite3 as SQLite3
    participant Flask as Flask
    participant React as React
end box

skinparam sequenceMessageAlign center
autonumber

user -> generate_frames: Start program

group Sending Image From WebCamera
    generate_frames -> WebCamera: Request Image
    activate generate_frames #FFBBBB
    WebCamera --> generate_frames: Sending image data packet
    deactivate generate_frames 
    generate_frames -> process_frame: Process image for detection
end

group Processing Image
    process_frame -> BrickognizeAPI: Passing image data packet
    activate process_frame #FFBBBB
    BrickognizeAPI --> process_frame: Passing predicted lego piece data
    deactivate process_frame
end

group Update WebApp
    process_frame -> Flask: Sending lego piece data to backend
    Flask -> SQLite3: Update DB with new piece
    Flask -> React: Update Frontend with new data
end

group Sorting Piece
    activate process_frame #FFBBBB
    process_frame -> Hardware: Sending bin coordinates to sort lego piece
    Hardware --> process_frame: Sending completed movement response
    deactivate process_frame
    process_frame -> generate_frames: Send response to get new image
end 

@enduml
